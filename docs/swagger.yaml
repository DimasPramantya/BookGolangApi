basePath: /api
definitions:
  dto.BaseResponse:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  dto.CreateCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.ErrorResponse:
    properties:
      code:
        type: integer
      data: {}
      error:
        type: string
    type: object
  dto.ReqCreateBookSwagger:
    properties:
      category_id:
        type: integer
      description:
        type: string
      image_url:
        type: string
      price:
        type: integer
      release_year:
        type: integer
      title:
        type: string
      total_page:
        type: integer
    type: object
  dto.ReqLogin:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.ReqRegister:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.ResBook:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      price:
        type: integer
      release_year:
        type: integer
      thickness:
        type: string
      title:
        type: string
      total_page:
        type: integer
    type: object
  dto.ResCategory:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
    type: object
  dto.ResLogin:
    properties:
      token:
        type: string
    type: object
  dto.ResUser:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      modified_by:
        type: string
      username:
        type: string
    type: object
  dto.UpdateCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
info:
  contact: {}
  description: API for managing books and categories with authentication.\n\nTo authorize,
    click "Authorize" and enter your JWT token in this format:\n**Bearer &lt;your_token&gt;**
  title: Bookstore API
  version: "1.0"
paths:
  /books:
    get:
      description: Retrieves a list of books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ResBook'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All Books
      tags:
      - book
    post:
      description: Create a new book
      parameters:
      - description: Create Book Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ReqCreateBookSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ResBook'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Book Entity
      tags:
      - book
  /books/{id}:
    delete:
      description: Delete a book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Book Entity
      tags:
      - book
    get:
      description: Retrieves a book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResBook'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Book By ID
      tags:
      - book
  /categories:
    get:
      description: Retrieves a list of categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ResCategory'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All Categories
      tags:
      - category
    post:
      description: Create a new category
      parameters:
      - description: Create Category Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ResCategory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Category Entity
      tags:
      - category
  /categories/{id}:
    delete:
      description: Delete a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Category Entity
      tags:
      - category
    get:
      description: Retrieves a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResCategory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Category By ID
      tags:
      - category
    put:
      description: Update category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Category Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResCategory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Category Entity
      tags:
      - category
  /categories/{id}/books:
    get:
      description: Retrieves a list of books in a specific category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ResBook'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get books by category ID
      tags:
      - book
  /users/login:
    post:
      description: User login
      parameters:
      - description: Login Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ReqLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResLogin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login
      tags:
      - auth
  /users/profile:
    get:
      description: Get user profile by JWT
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ResUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get User Profile By JWT
      tags:
      - users
  /users/register:
    post:
      description: Register new user
      parameters:
      - description: Register Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ReqRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
